/*
 * Contacts
 *
 * Simple AddressBook API to manage contacts
 *
 * API version: 1.0
 * Contact: john.doe@mail.schwarz
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package controllers

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"regexp"
	"strconv"

	"github.com/JJDoneAway/addressbook/models"
)

var ErrMissingMandatoryFields = errors.New("FirstName and LastName are mandatory")
var ErrIncorrectID = errors.New("ID is not correctly specified")

type urlController struct {
	urlIDPattern *regexp.Regexp
}

func newUrlController() *urlController {
	return &urlController{
		urlIDPattern: regexp.MustCompile(`addressbook/v1/([a-zA-Z0-9]+)/?([0-9]+)$`),
	}
}

func GetContact(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	cID, err := parseRequestID(r)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("ID could not be read from request"), w)
		return
	}

	contact, err := (&models.Contact{ID: cID}).GetContactByID()
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("There is no contact entity with the id â€˜%d'", cID), w)
		return
	}
	encodeResponseAsJSON(contact, w)
	w.WriteHeader(http.StatusOK)
}

func GetContacts(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	encodeResponseAsJSON((&models.Contact{}).GetAllContacts(), w)
	w.WriteHeader(http.StatusOK)
}

func CreateContact(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	contact, err := parseRequestBody(r)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("Could not parse the body of the request. Error was '%v'", err), w)
		return
	}

	err = contact.InsertContact()
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		encodeResponseAsJSON(fmt.Sprintf("Could not insert contact: %v. Error was '%v'", *contact, err), w)
		return
	}
	encodeResponseAsJSON(contact, w)
	w.WriteHeader(http.StatusOK)
}

func DeleteContact(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	cID, err := parseRequestID(r)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("ID could not be read from request"), w)
		return
	}

	err = (&models.Contact{ID: cID}).DeleteContactByID()
	if err == models.ErrUnknownID {
		w.WriteHeader(http.StatusBadRequest)
		encodeResponseAsJSON(fmt.Sprintf("The contact with the id '%d' is unknown.", cID), w)
		return
	}
	encodeResponseAsJSON(fmt.Sprintf("The contact with the id '%d' is deleted.", cID), w)
	w.WriteHeader(http.StatusOK)
}

func UpdateContact(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	contact, err := parseRequestBody(r)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("Could not parse the body of the request. Error was '%v'", err), w)
		return
	}

	var cID uint64
	cID, err = parseRequestID(r)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		encodeResponseAsJSON(fmt.Sprintf("ID could not be read from request"), w)
		return
	}
	if cID != contact.ID {
		w.WriteHeader(http.StatusBadRequest)
		encodeResponseAsJSON(fmt.Sprintf("The id out of the contact entity '%d' must be equal to the id of the url path '%d', but wasn't", contact.ID, cID), w)
		return
	}

	err = contact.UpdateContact()
	if err == models.ErrUnknownID {
		w.WriteHeader(http.StatusBadRequest)
		encodeResponseAsJSON(fmt.Sprintf("The contact with the id '%d' is unknown. Maybe you mean a POST request", contact.ID), w)
		return
	}

	encodeResponseAsJSON(contact, w)

	w.WriteHeader(http.StatusOK)
}

func encodeResponseAsJSON(data any, w io.Writer) {
	enc := json.NewEncoder(w)
	enc.Encode(data)
}

// extract the contact out of the request body
func parseRequestBody(r *http.Request) (*models.Contact, error) {
	dec := json.NewDecoder(r.Body)
	var contact models.Contact

	// parse body
	err := dec.Decode(&contact)
	if err != nil {
		return nil, err
	}

	if contact.FirstName == "" || contact.LastName == "" {
		return nil, ErrMissingMandatoryFields
	}

	return &contact, nil
}

// extract the contact ID out of the URL
func parseRequestID(r *http.Request) (uint64, error) {
	uc := newUrlController()
	urlParts := uc.urlIDPattern.FindStringSubmatch(r.URL.Path)
	if len(urlParts) == 0 || len(urlParts) > 3 {
		return 0, ErrMissingMandatoryFields
	}

	cID, err := strconv.ParseUint(urlParts[2], 10, 64)
	if err != nil {
		return 0, ErrIncorrectID
	}
	return cID, nil
}
